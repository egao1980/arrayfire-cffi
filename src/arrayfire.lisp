;;; This file was automatically generated by SWIG (http://www.swig.org).
;;; Version 4.1.0
;;;
;;; Do not make changes to this file unless you know what you are doing--modify
;;; the SWIG interface file instead.


(defpackage #:arrayfire-cffi/v3.8.0
  (:use #:cl #:cffi))

(in-package :arrayfire-cffi/v3.8.0)



;;;SWIG wrapper code starts here

(cl:defmacro defanonenum (cl:&body enums)
   "Converts anonymous enums to defconstants."
  `(cl:progn ,@(cl:loop for value in enums
                        for index = 0 then (cl:1+ index)
                        when (cl:listp value) do (cl:setf index (cl:second value)
                                                          value (cl:first value))
                        collect `(cl:defconstant ,value ,index))))

(cl:eval-when (:compile-toplevel :load-toplevel)
  (cl:unless (cl:fboundp 'swig-lispify)
    (cl:defun swig-lispify (name flag cl:&optional (package cl:*package*))
      (cl:labels ((helper (lst last rest cl:&aux (c (cl:car lst)))
                    (cl:cond
                      ((cl:null lst)
                       rest)
                      ((cl:upper-case-p c)
                       (helper (cl:cdr lst) 'upper
                               (cl:case last
                                 ((lower digit) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:lower-case-p c)
                       (helper (cl:cdr lst) 'lower (cl:cons (cl:char-upcase c) rest)))
                      ((cl:digit-char-p c)
                       (helper (cl:cdr lst) 'digit 
                               (cl:case last
                                 ((upper lower) (cl:list* c #\- rest))
                                 (cl:t (cl:cons c rest)))))
                      ((cl:char-equal c #\_)
                       (helper (cl:cdr lst) '_ (cl:cons #\- rest)))
                      (cl:t
                       (cl:error "Invalid character: ~A" c)))))
        (cl:let ((fix (cl:case flag
                        ((constant enumvalue) "+")
                        (variable "*")
                        (cl:t ""))))
          (cl:intern
           (cl:concatenate
            'cl:string
            fix
            (cl:nreverse (helper (cl:concatenate 'cl:list name) cl:nil cl:nil))
            fix)
           package))))))

;;;SWIG wrapper code ends here


(cl:defconstant AF_VERSION "3.8.0")

(cl:defconstant AF_VERSION_MAJOR 3)

(cl:defconstant AF_VERSION_MINOR 8)

(cl:defconstant AF_VERSION_PATCH 0)

(cl:defconstant AF_API_VERSION_CURRENT 38)

(cl:defconstant SIZE_T_FRMT_SPECIFIER "%zu")

(cffi:defctype dim_t :long-long)

(cffi:defctype intl :long-long)

(cffi:defctype uintl :unsigned-long-long)

(cl:defconstant AF_API_VERSION 38)

(cffi:defcenum af_err
	(:AF_SUCCESS 0)
	(:AF_ERR_NO_MEM 101)
	(:AF_ERR_DRIVER 102)
	(:AF_ERR_RUNTIME 103)
	(:AF_ERR_INVALID_ARRAY 201)
	(:AF_ERR_ARG 202)
	(:AF_ERR_SIZE 203)
	(:AF_ERR_TYPE 204)
	(:AF_ERR_DIFF_TYPE 205)
	(:AF_ERR_BATCH 207)
	(:AF_ERR_DEVICE 208)
	(:AF_ERR_NOT_SUPPORTED 301)
	(:AF_ERR_NOT_CONFIGURED 302)
	(:AF_ERR_NONFREE 303)
	(:AF_ERR_NO_DBL 401)
	(:AF_ERR_NO_GFX 402)
	(:AF_ERR_NO_HALF 403)
	(:AF_ERR_LOAD_LIB 501)
	(:AF_ERR_LOAD_SYM 502)
	(:AF_ERR_ARR_BKND_MISMATCH 503)
	(:AF_ERR_INTERNAL 998)
	(:AF_ERR_UNKNOWN 999))

(cffi:defcenum af_dtype
	:f32
	:c32
	:f64
	:c64
	:b8
	:s32
	:u32
	:u8
	:s64
	:u64
	:s16
	:u16
	:f16)

(cffi:defcenum af_source
	:afDevice
	:afHost)

(cl:defconstant AF_MAX_DIMS 4)

(cffi:defctype af_array :pointer)

(cffi:defcenum af_interp_type
	:AF_INTERP_NEAREST
	:AF_INTERP_LINEAR
	:AF_INTERP_BILINEAR
	:AF_INTERP_CUBIC
	:AF_INTERP_LOWER
	:AF_INTERP_LINEAR_COSINE
	:AF_INTERP_BILINEAR_COSINE
	:AF_INTERP_BICUBIC
	:AF_INTERP_CUBIC_SPLINE
	:AF_INTERP_BICUBIC_SPLINE)

(cffi:defcenum af_border_type
	(:AF_PAD_ZERO 0)
	:AF_PAD_SYM
	:AF_PAD_CLAMP_TO_EDGE
	:AF_PAD_PERIODIC)

(cffi:defcenum af_connectivity
	(:AF_CONNECTIVITY_4 4)
	(:AF_CONNECTIVITY_8 8))

(cffi:defcenum af_conv_mode
	:AF_CONV_DEFAULT
	:AF_CONV_EXPAND)

(cffi:defcenum af_conv_domain
	:AF_CONV_AUTO
	:AF_CONV_SPATIAL
	:AF_CONV_FREQ)

(cffi:defcenum af_match_type
	(:AF_SAD 0)
	:AF_ZSAD
	:AF_LSAD
	:AF_SSD
	:AF_ZSSD
	:AF_LSSD
	:AF_NCC
	:AF_ZNCC
	:AF_SHD)

(cffi:defcenum af_ycc_std
	(:AF_YCC_601 601)
	(:AF_YCC_709 709)
	(:AF_YCC_2020 2020))

(cffi:defcenum af_cspace_t
	(:AF_GRAY 0)
	:AF_RGB
	:AF_HSV
	:AF_YCbCr)

(cffi:defcenum af_mat_prop
	(:AF_MAT_NONE 0)
	(:AF_MAT_TRANS 1)
	(:AF_MAT_CTRANS 2)
	(:AF_MAT_CONJ 4)
	(:AF_MAT_UPPER 32)
	(:AF_MAT_LOWER 64)
	(:AF_MAT_DIAG_UNIT 128)
	(:AF_MAT_SYM 512)
	(:AF_MAT_POSDEF 1024)
	(:AF_MAT_ORTHOG 2048)
	(:AF_MAT_TRI_DIAG 4096)
	(:AF_MAT_BLOCK_DIAG 8192))

(cffi:defcenum af_norm_type
	:AF_NORM_VECTOR_1
	:AF_NORM_VECTOR_INF
	:AF_NORM_VECTOR_2
	:AF_NORM_VECTOR_P
	:AF_NORM_MATRIX_1
	:AF_NORM_MATRIX_INF
	:AF_NORM_MATRIX_2
	:AF_NORM_MATRIX_L_PQ
	(:AF_NORM_EUCLID :AF_NORM_VECTOR_2))

(cffi:defcenum af_image_format
	(:AF_FIF_BMP 0)
	(:AF_FIF_ICO 1)
	(:AF_FIF_JPEG 2)
	(:AF_FIF_JNG 3)
	(:AF_FIF_PNG 13)
	(:AF_FIF_PPM 14)
	(:AF_FIF_PPMRAW 15)
	(:AF_FIF_TIFF 18)
	(:AF_FIF_PSD 20)
	(:AF_FIF_HDR 26)
	(:AF_FIF_EXR 29)
	(:AF_FIF_JP2 31)
	(:AF_FIF_RAW 34))

(cffi:defcenum af_moment_type
	(:AF_MOMENT_M00 1)
	(:AF_MOMENT_M01 2)
	(:AF_MOMENT_M10 4)
	(:AF_MOMENT_M11 8)
	(:AF_MOMENT_FIRST_ORDER (cl:logior AF_MOMENT_M00 AF_MOMENT_M01 AF_MOMENT_M10 AF_MOMENT_M11)))

(cffi:defcenum af_homography_type
	(:AF_HOMOGRAPHY_RANSAC 0)
	(:AF_HOMOGRAPHY_LMEDS 1))

(cffi:defcenum af_backend
	(:AF_BACKEND_DEFAULT 0)
	(:AF_BACKEND_CPU 1)
	(:AF_BACKEND_CUDA 2)
	(:AF_BACKEND_OPENCL 4))

(cffi:defcenum af_someenum_t
	(:AF_ID 0))

(cffi:defcenum af_binary_op
	(:AF_BINARY_ADD 0)
	(:AF_BINARY_MUL 1)
	(:AF_BINARY_MIN 2)
	(:AF_BINARY_MAX 3))

(cffi:defcenum af_random_engine_type
	(:AF_RANDOM_ENGINE_PHILOX_4X32_10 100)
	(:AF_RANDOM_ENGINE_THREEFRY_2X32_16 200)
	(:AF_RANDOM_ENGINE_MERSENNE_GP11213 300)
	(:AF_RANDOM_ENGINE_PHILOX :AF_RANDOM_ENGINE_PHILOX_4X32_10)
	(:AF_RANDOM_ENGINE_THREEFRY :AF_RANDOM_ENGINE_THREEFRY_2X32_16)
	(:AF_RANDOM_ENGINE_MERSENNE :AF_RANDOM_ENGINE_MERSENNE_GP11213)
	(:AF_RANDOM_ENGINE_DEFAULT :AF_RANDOM_ENGINE_PHILOX))

(cffi:defcenum af_colormap
	(:AF_COLORMAP_DEFAULT 0)
	(:AF_COLORMAP_SPECTRUM 1)
	(:AF_COLORMAP_COLORS 2)
	(:AF_COLORMAP_RED 3)
	(:AF_COLORMAP_MOOD 4)
	(:AF_COLORMAP_HEAT 5)
	(:AF_COLORMAP_BLUE 6)
	(:AF_COLORMAP_INFERNO 7)
	(:AF_COLORMAP_MAGMA 8)
	(:AF_COLORMAP_PLASMA 9)
	(:AF_COLORMAP_VIRIDIS 10))

(cffi:defcenum af_marker_type
	(:AF_MARKER_NONE 0)
	(:AF_MARKER_POINT 1)
	(:AF_MARKER_CIRCLE 2)
	(:AF_MARKER_SQUARE 3)
	(:AF_MARKER_TRIANGLE 4)
	(:AF_MARKER_CROSS 5)
	(:AF_MARKER_PLUS 6)
	(:AF_MARKER_STAR 7))

(cffi:defcenum af_canny_threshold
	(:AF_CANNY_THRESHOLD_MANUAL 0)
	(:AF_CANNY_THRESHOLD_AUTO_OTSU 1))

(cffi:defcenum af_storage
	(:AF_STORAGE_DENSE 0)
	(:AF_STORAGE_CSR 1)
	(:AF_STORAGE_CSC 2)
	(:AF_STORAGE_COO 3))

(cffi:defcenum af_flux_function
	(:AF_FLUX_QUADRATIC 1)
	(:AF_FLUX_EXPONENTIAL 2)
	(:AF_FLUX_DEFAULT 0))

(cffi:defcenum af_diffusion_eq
	(:AF_DIFFUSION_GRAD 1)
	(:AF_DIFFUSION_MCDE 2)
	(:AF_DIFFUSION_DEFAULT 0))

(cffi:defcenum af_topk_function
	(:AF_TOPK_MIN 1)
	(:AF_TOPK_MAX 2)
	(:AF_TOPK_DEFAULT 0))

(cffi:defcenum af_var_bias
	(:AF_VARIANCE_DEFAULT 0)
	(:AF_VARIANCE_SAMPLE 1)
	(:AF_VARIANCE_POPULATION 2))

(cffi:defcenum af_iterative_deconv_algo
	(:AF_ITERATIVE_DECONV_LANDWEBER 1)
	(:AF_ITERATIVE_DECONV_RICHARDSONLUCY 2)
	(:AF_ITERATIVE_DECONV_DEFAULT 0))

(cffi:defcenum af_inverse_deconv_algo
	(:AF_INVERSE_DECONV_TIKHONOV 1)
	(:AF_INVERSE_DECONV_DEFAULT 0))

(cffi:defcenum af_conv_gradient_type
	(:AF_CONV_GRADIENT_DEFAULT 0)
	(:AF_CONV_GRADIENT_FILTER 1)
	(:AF_CONV_GRADIENT_DATA 2)
	(:AF_CONV_GRADIENT_BIAS 3))

(cffi:defcfun ("af_sum" af_sum) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_sum_nan" af_sum_nan) af_err
  (out :pointer)
  (in :pointer)
  (dim :int)
  (nanval :double))

(cffi:defcfun ("af_sum_by_key" af_sum_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_sum_by_key_nan" af_sum_by_key_nan) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int)
  (nanval :double))

(cffi:defcfun ("af_product" af_product) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_product_nan" af_product_nan) af_err
  (out :pointer)
  (in :pointer)
  (dim :int)
  (nanval :double))

(cffi:defcfun ("af_product_by_key" af_product_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_product_by_key_nan" af_product_by_key_nan) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int)
  (nanval :double))

(cffi:defcfun ("af_min" af_min) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_min_by_key" af_min_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_max" af_max) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_max_by_key" af_max_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_max_ragged" af_max_ragged) af_err
  (val :pointer)
  (idx :pointer)
  (in :pointer)
  (ragged_len :pointer)
  (dim :int))

(cffi:defcfun ("af_all_true" af_all_true) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_all_true_by_key" af_all_true_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_any_true" af_any_true) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_any_true_by_key" af_any_true_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_count" af_count) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_count_by_key" af_count_by_key) af_err
  (keys_out :pointer)
  (vals_out :pointer)
  (keys :pointer)
  (vals :pointer)
  (dim :int))

(cffi:defcfun ("af_sum_all" af_sum_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_sum_nan_all" af_sum_nan_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer)
  (nanval :double))

(cffi:defcfun ("af_product_all" af_product_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_product_nan_all" af_product_nan_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer)
  (nanval :double))

(cffi:defcfun ("af_min_all" af_min_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_max_all" af_max_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_all_true_all" af_all_true_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_any_true_all" af_any_true_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_count_all" af_count_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_imin" af_imin) af_err
  (out :pointer)
  (idx :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_imax" af_imax) af_err
  (out :pointer)
  (idx :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_imin_all" af_imin_all) af_err
  (real :pointer)
  (imag :pointer)
  (idx :pointer)
  (in :pointer))

(cffi:defcfun ("af_imax_all" af_imax_all) af_err
  (real :pointer)
  (imag :pointer)
  (idx :pointer)
  (in :pointer))

(cffi:defcfun ("af_accum" af_accum) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_scan" af_scan) af_err
  (out :pointer)
  (in :pointer)
  (dim :int)
  (op af_binary_op)
  (inclusive_scan :pointer))

(cffi:defcfun ("af_scan_by_key" af_scan_by_key) af_err
  (out :pointer)
  (key :pointer)
  (in :pointer)
  (dim :int)
  (op af_binary_op)
  (inclusive_scan :pointer))

(cffi:defcfun ("af_where" af_where) af_err
  (idx :pointer)
  (in :pointer))

(cffi:defcfun ("af_diff1" af_diff1) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_diff2" af_diff2) af_err
  (out :pointer)
  (in :pointer)
  (dim :int))

(cffi:defcfun ("af_sort" af_sort) af_err
  (out :pointer)
  (in :pointer)
  (dim :unsigned-int)
  (isAscending :pointer))

(cffi:defcfun ("af_sort_index" af_sort_index) af_err
  (out :pointer)
  (indices :pointer)
  (in :pointer)
  (dim :unsigned-int)
  (isAscending :pointer))

(cffi:defcfun ("af_sort_by_key" af_sort_by_key) af_err
  (out_keys :pointer)
  (out_values :pointer)
  (keys :pointer)
  (values :pointer)
  (dim :unsigned-int)
  (isAscending :pointer))

(cffi:defcfun ("af_set_unique" af_set_unique) af_err
  (out :pointer)
  (in :pointer)
  (is_sorted :pointer))

(cffi:defcfun ("af_set_union" af_set_union) af_err
  (out :pointer)
  (first :pointer)
  (second :pointer)
  (is_unique :pointer))

(cffi:defcfun ("af_set_intersect" af_set_intersect) af_err
  (out :pointer)
  (first :pointer)
  (second :pointer)
  (is_unique :pointer))

(cffi:defcfun ("af_add" af_add) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_sub" af_sub) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_mul" af_mul) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_div" af_div) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_lt" af_lt) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_gt" af_gt) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_le" af_le) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_ge" af_ge) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_eq" af_eq) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_neq" af_neq) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_and" af_and) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_or" af_or) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_not" af_not) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_bitnot" af_bitnot) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_bitand" af_bitand) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_bitor" af_bitor) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_bitxor" af_bitxor) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_bitshiftl" af_bitshiftl) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_bitshiftr" af_bitshiftr) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_cast" af_cast) af_err
  (out :pointer)
  (in :pointer)
  (type af_dtype))

(cffi:defcfun ("af_minof" af_minof) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_maxof" af_maxof) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_clamp" af_clamp) af_err
  (out :pointer)
  (in :pointer)
  (lo :pointer)
  (hi :pointer)
  (batch :pointer))

(cffi:defcfun ("af_rem" af_rem) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_mod" af_mod) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_abs" af_abs) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_arg" af_arg) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sign" af_sign) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_round" af_round) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_trunc" af_trunc) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_floor" af_floor) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_ceil" af_ceil) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_hypot" af_hypot) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_sin" af_sin) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_cos" af_cos) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_tan" af_tan) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_asin" af_asin) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_acos" af_acos) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_atan" af_atan) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_atan2" af_atan2) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_cplx2" af_cplx2) af_err
  (out :pointer)
  (real :pointer)
  (imaginary :pointer)
  (batch :pointer))

(cffi:defcfun ("af_cplx" af_cplx) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_real" af_real) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_imag" af_imag) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_conjg" af_conjg) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sinh" af_sinh) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_cosh" af_cosh) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_tanh" af_tanh) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_asinh" af_asinh) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_acosh" af_acosh) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_atanh" af_atanh) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_root" af_root) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_pow" af_pow) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (batch :pointer))

(cffi:defcfun ("af_pow2" af_pow2) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_exp" af_exp) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sigmoid" af_sigmoid) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_expm1" af_expm1) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_erf" af_erf) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_erfc" af_erfc) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_log" af_log) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_log1p" af_log1p) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_log10" af_log10) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_log2" af_log2) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sqrt" af_sqrt) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_rsqrt" af_rsqrt) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_cbrt" af_cbrt) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_factorial" af_factorial) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_tgamma" af_tgamma) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_lgamma" af_lgamma) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_iszero" af_iszero) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_isinf" af_isinf) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_isnan" af_isnan) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_create_array" af_create_array) af_err
  (arr :pointer)
  (data :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_create_handle" af_create_handle) af_err
  (arr :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_copy_array" af_copy_array) af_err
  (arr :pointer)
  (in :pointer))

(cffi:defcfun ("af_write_array" af_write_array) af_err
  (arr :pointer)
  (data :pointer)
  (bytes :pointer)
  (src af_source))

(cffi:defcfun ("af_get_data_ptr" af_get_data_ptr) af_err
  (data :pointer)
  (arr :pointer))

(cffi:defcfun ("af_release_array" af_release_array) af_err
  (arr :pointer))

(cffi:defcfun ("af_retain_array" af_retain_array) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_get_data_ref_count" af_get_data_ref_count) af_err
  (use_count :pointer)
  (in :pointer))

(cffi:defcfun ("af_eval" af_eval) af_err
  (in :pointer))

(cffi:defcfun ("af_eval_multiple" af_eval_multiple) af_err
  (num :int)
  (arrays :pointer))

(cffi:defcfun ("af_set_manual_eval_flag" af_set_manual_eval_flag) af_err
  (flag :pointer))

(cffi:defcfun ("af_get_manual_eval_flag" af_get_manual_eval_flag) af_err
  (flag :pointer))

(cffi:defcfun ("af_get_elements" af_get_elements) af_err
  (elems :pointer)
  (arr :pointer))

(cffi:defcfun ("af_get_type" af_get_type) af_err
  (type :pointer)
  (arr :pointer))

(cffi:defcfun ("af_get_dims" af_get_dims) af_err
  (d0 :pointer)
  (d1 :pointer)
  (d2 :pointer)
  (d3 :pointer)
  (arr :pointer))

(cffi:defcfun ("af_get_numdims" af_get_numdims) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_empty" af_is_empty) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_scalar" af_is_scalar) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_row" af_is_row) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_column" af_is_column) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_vector" af_is_vector) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_complex" af_is_complex) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_real" af_is_real) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_double" af_is_double) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_single" af_is_single) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_half" af_is_half) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_realfloating" af_is_realfloating) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_floating" af_is_floating) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_integer" af_is_integer) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_bool" af_is_bool) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_is_sparse" af_is_sparse) af_err
  (result :pointer)
  (arr :pointer))

(cffi:defcfun ("af_get_scalar" af_get_scalar) af_err
  (output_value :pointer)
  (arr :pointer))

(cffi:defcfun ("af_set_backend" af_set_backend) af_err
  (bknd af_backend))

(cffi:defcfun ("af_get_backend_count" af_get_backend_count) af_err
  (num_backends :pointer))

(cffi:defcfun ("af_get_available_backends" af_get_available_backends) af_err
  (backends :pointer))

(cffi:defcfun ("af_get_backend_id" af_get_backend_id) af_err
  (backend :pointer)
  (in :pointer))

(cffi:defcfun ("af_get_active_backend" af_get_active_backend) af_err
  (backend :pointer))

(cffi:defcfun ("af_get_device_id" af_get_device_id) af_err
  (device :pointer)
  (in :pointer))

(cffi:defcfun ("af_gemm" af_gemm) af_err
  (C :pointer)
  (opA af_mat_prop)
  (opB af_mat_prop)
  (alpha :pointer)
  (A :pointer)
  (B :pointer)
  (beta :pointer))

(cffi:defcfun ("af_matmul" af_matmul) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (optLhs af_mat_prop)
  (optRhs af_mat_prop))

(cffi:defcfun ("af_dot" af_dot) af_err
  (out :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (optLhs af_mat_prop)
  (optRhs af_mat_prop))

(cffi:defcfun ("af_dot_all" af_dot_all) af_err
  (real :pointer)
  (imag :pointer)
  (lhs :pointer)
  (rhs :pointer)
  (optLhs af_mat_prop)
  (optRhs af_mat_prop))

(cffi:defcfun ("af_transpose" af_transpose) af_err
  (out :pointer)
  (in :pointer)
  (conjugate :pointer))

(cffi:defcfun ("af_transpose_inplace" af_transpose_inplace) af_err
  (in :pointer)
  (conjugate :pointer))

(cffi:defcstruct af_cfloat
	(real :float)
	(imag :float))

(cffi:defctype af_cfloat af_cfloat)

(cffi:defcstruct af_cdouble
	(real :double)
	(imag :double))

(cffi:defctype af_cdouble af_cdouble)

(cffi:defcfun ("af_constant" af_constant) af_err
  (arr :pointer)
  (val :double)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_constant_complex" af_constant_complex) af_err
  (arr :pointer)
  (real :double)
  (imag :double)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_constant_long" af_constant_long) af_err
  (arr :pointer)
  (val :long-long)
  (ndims :unsigned-int)
  (dims :pointer))

(cffi:defcfun ("af_constant_ulong" af_constant_ulong) af_err
  (arr :pointer)
  (val :unsigned-long-long)
  (ndims :unsigned-int)
  (dims :pointer))

(cffi:defcfun ("af_range" af_range) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (seq_dim :int)
  (type af_dtype))

(cffi:defcfun ("af_iota" af_iota) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (t_ndims :unsigned-int)
  (tdims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_identity" af_identity) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_diag_create" af_diag_create) af_err
  (out :pointer)
  (in :pointer)
  (num :int))

(cffi:defcfun ("af_diag_extract" af_diag_extract) af_err
  (out :pointer)
  (in :pointer)
  (num :int))

(cffi:defcfun ("af_join" af_join) af_err
  (out :pointer)
  (dim :int)
  (first :pointer)
  (second :pointer))

(cffi:defcfun ("af_join_many" af_join_many) af_err
  (out :pointer)
  (dim :int)
  (n_arrays :unsigned-int)
  (inputs :pointer))

(cffi:defcfun ("af_tile" af_tile) af_err
  (out :pointer)
  (in :pointer)
  (x :unsigned-int)
  (y :unsigned-int)
  (z :unsigned-int)
  (w :unsigned-int))

(cffi:defcfun ("af_reorder" af_reorder) af_err
  (out :pointer)
  (in :pointer)
  (x :unsigned-int)
  (y :unsigned-int)
  (z :unsigned-int)
  (w :unsigned-int))

(cffi:defcfun ("af_shift" af_shift) af_err
  (out :pointer)
  (in :pointer)
  (x :int)
  (y :int)
  (z :int)
  (w :int))

(cffi:defcfun ("af_moddims" af_moddims) af_err
  (out :pointer)
  (in :pointer)
  (ndims :unsigned-int)
  (dims :pointer))

(cffi:defcfun ("af_flat" af_flat) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_flip" af_flip) af_err
  (out :pointer)
  (in :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("af_lower" af_lower) af_err
  (out :pointer)
  (in :pointer)
  (is_unit_diag :pointer))

(cffi:defcfun ("af_upper" af_upper) af_err
  (out :pointer)
  (in :pointer)
  (is_unit_diag :pointer))

(cffi:defcfun ("af_select" af_select) af_err
  (out :pointer)
  (cond :pointer)
  (a :pointer)
  (b :pointer))

(cffi:defcfun ("af_select_scalar_r" af_select_scalar_r) af_err
  (out :pointer)
  (cond :pointer)
  (a :pointer)
  (b :double))

(cffi:defcfun ("af_select_scalar_l" af_select_scalar_l) af_err
  (out :pointer)
  (cond :pointer)
  (a :double)
  (b :pointer))

(cffi:defcfun ("af_replace" af_replace) af_err
  (a :pointer)
  (cond :pointer)
  (b :pointer))

(cffi:defcfun ("af_replace_scalar" af_replace_scalar) af_err
  (a :pointer)
  (cond :pointer)
  (b :double))

(cffi:defcfun ("af_pad" af_pad) af_err
  (out :pointer)
  (in :pointer)
  (begin_ndims :unsigned-int)
  (begin_dims :pointer)
  (end_ndims :unsigned-int)
  (end_dims :pointer)
  (pad_fill_type af_border_type))

(cffi:defcfun ("af_info" af_info) af_err)

(cffi:defcfun ("af_init" af_init) af_err)

(cffi:defcfun ("af_info_string" af_info_string) af_err
  (str :pointer)
  (verbose :pointer))

(cffi:defcfun ("af_device_info" af_device_info) af_err
  (d_name :string)
  (d_platform :string)
  (d_toolkit :string)
  (d_compute :string))

(cffi:defcfun ("af_get_device_count" af_get_device_count) af_err
  (num_of_devices :pointer))

(cffi:defcfun ("af_get_dbl_support" af_get_dbl_support) af_err
  (available :pointer)
  (device :int))

(cffi:defcfun ("af_get_half_support" af_get_half_support) af_err
  (available :pointer)
  (device :int))

(cffi:defcfun ("af_set_device" af_set_device) af_err
  (device :int))

(cffi:defcfun ("af_get_device" af_get_device) af_err
  (device :pointer))

(cffi:defcfun ("af_sync" af_sync) af_err
  (device :int))

(cffi:defcfun ("af_alloc_device" af_alloc_device) af_err
  (ptr :pointer)
  (bytes :long-long))

(cffi:defcfun ("af_free_device" af_free_device) af_err
  (ptr :pointer))

(cffi:defcfun ("af_alloc_device_v2" af_alloc_device_v2) af_err
  (ptr :pointer)
  (bytes :long-long))

(cffi:defcfun ("af_free_device_v2" af_free_device_v2) af_err
  (ptr :pointer))

(cffi:defcfun ("af_alloc_pinned" af_alloc_pinned) af_err
  (ptr :pointer)
  (bytes :long-long))

(cffi:defcfun ("af_free_pinned" af_free_pinned) af_err
  (ptr :pointer))

(cffi:defcfun ("af_alloc_host" af_alloc_host) af_err
  (ptr :pointer)
  (bytes :long-long))

(cffi:defcfun ("af_free_host" af_free_host) af_err
  (ptr :pointer))

(cffi:defcfun ("af_device_array" af_device_array) af_err
  (arr :pointer)
  (data :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_device_mem_info" af_device_mem_info) af_err
  (alloc_bytes :pointer)
  (alloc_buffers :pointer)
  (lock_bytes :pointer)
  (lock_buffers :pointer))

(cffi:defcfun ("af_print_mem_info" af_print_mem_info) af_err
  (msg :string)
  (device_id :int))

(cffi:defcfun ("af_device_gc" af_device_gc) af_err)

(cffi:defcfun ("af_set_mem_step_size" af_set_mem_step_size) af_err
  (step_bytes :pointer))

(cffi:defcfun ("af_get_mem_step_size" af_get_mem_step_size) af_err
  (step_bytes :pointer))

(cffi:defcfun ("af_lock_device_ptr" af_lock_device_ptr) af_err
  (arr :pointer))

(cffi:defcfun ("af_unlock_device_ptr" af_unlock_device_ptr) af_err
  (arr :pointer))

(cffi:defcfun ("af_lock_array" af_lock_array) af_err
  (arr :pointer))

(cffi:defcfun ("af_unlock_array" af_unlock_array) af_err
  (arr :pointer))

(cffi:defcfun ("af_is_locked_array" af_is_locked_array) af_err
  (res :pointer)
  (arr :pointer))

(cffi:defcfun ("af_get_device_ptr" af_get_device_ptr) af_err
  (ptr :pointer)
  (arr :pointer))

(cffi:defcfun ("af_set_kernel_cache_directory" af_set_kernel_cache_directory) af_err
  (path :string)
  (override_env :int))

(cffi:defcfun ("af_get_kernel_cache_directory" af_get_kernel_cache_directory) af_err
  (length :pointer)
  (path :string))

(cffi:defctype af_event :pointer)

(cffi:defcfun ("af_create_event" af_create_event) af_err
  (eventHandle :pointer))

(cffi:defcfun ("af_delete_event" af_delete_event) af_err
  (eventHandle :pointer))

(cffi:defcfun ("af_mark_event" af_mark_event) af_err
  (eventHandle :pointer))

(cffi:defcfun ("af_enqueue_wait_event" af_enqueue_wait_event) af_err
  (eventHandle :pointer))

(cffi:defcfun ("af_block_event" af_block_event) af_err
  (eventHandle :pointer))

(cffi:defcfun ("af_get_last_error" af_get_last_error) :void
  (msg :pointer)
  (len :pointer))

(cffi:defcfun ("af_err_to_string" af_err_to_string) :string
  (err af_err))

(cffi:defctype af_features :pointer)

(cffi:defcfun ("af_create_features" af_create_features) af_err
  (feat :pointer)
  (num :long-long))

(cffi:defcfun ("af_retain_features" af_retain_features) af_err
  (out :pointer)
  (feat :pointer))

(cffi:defcfun ("af_get_features_num" af_get_features_num) af_err
  (num :pointer)
  (feat :pointer))

(cffi:defcfun ("af_get_features_xpos" af_get_features_xpos) af_err
  (out :pointer)
  (feat :pointer))

(cffi:defcfun ("af_get_features_ypos" af_get_features_ypos) af_err
  (out :pointer)
  (feat :pointer))

(cffi:defcfun ("af_get_features_score" af_get_features_score) af_err
  (score :pointer)
  (feat :pointer))

(cffi:defcfun ("af_get_features_orientation" af_get_features_orientation) af_err
  (orientation :pointer)
  (feat :pointer))

(cffi:defcfun ("af_get_features_size" af_get_features_size) af_err
  (size :pointer)
  (feat :pointer))

(cffi:defcfun ("af_release_features" af_release_features) af_err
  (feat :pointer))

(cffi:defctype af_window :pointer)

(cffi:defcstruct af_cell
	(row :int)
	(col :int)
	(title :string)
	(cmap af_colormap))

(cffi:defctype af_cell af_cell)

(cffi:defcfun ("af_create_window" af_create_window) af_err
  (out :pointer)
  (width :int)
  (height :int)
  (title :string))

(cffi:defcfun ("af_set_position" af_set_position) af_err
  (wind :pointer)
  (x :unsigned-int)
  (y :unsigned-int))

(cffi:defcfun ("af_set_title" af_set_title) af_err
  (wind :pointer)
  (title :string))

(cffi:defcfun ("af_set_size" af_set_size) af_err
  (wind :pointer)
  (w :unsigned-int)
  (h :unsigned-int))

(cffi:defcfun ("af_draw_image" af_draw_image) af_err
  (wind :pointer)
  (in :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_plot" af_draw_plot) af_err
  (wind :pointer)
  (X :pointer)
  (Y :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_plot3" af_draw_plot3) af_err
  (wind :pointer)
  (P :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_plot_nd" af_draw_plot_nd) af_err
  (wind :pointer)
  (P :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_plot_2d" af_draw_plot_2d) af_err
  (wind :pointer)
  (X :pointer)
  (Y :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_plot_3d" af_draw_plot_3d) af_err
  (wind :pointer)
  (X :pointer)
  (Y :pointer)
  (Z :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_scatter" af_draw_scatter) af_err
  (wind :pointer)
  (X :pointer)
  (Y :pointer)
  (marker af_marker_type)
  (props :pointer))

(cffi:defcfun ("af_draw_scatter3" af_draw_scatter3) af_err
  (wind :pointer)
  (P :pointer)
  (marker af_marker_type)
  (props :pointer))

(cffi:defcfun ("af_draw_scatter_nd" af_draw_scatter_nd) af_err
  (wind :pointer)
  (P :pointer)
  (marker af_marker_type)
  (props :pointer))

(cffi:defcfun ("af_draw_scatter_2d" af_draw_scatter_2d) af_err
  (wind :pointer)
  (X :pointer)
  (Y :pointer)
  (marker af_marker_type)
  (props :pointer))

(cffi:defcfun ("af_draw_scatter_3d" af_draw_scatter_3d) af_err
  (wind :pointer)
  (X :pointer)
  (Y :pointer)
  (Z :pointer)
  (marker af_marker_type)
  (props :pointer))

(cffi:defcfun ("af_draw_hist" af_draw_hist) af_err
  (wind :pointer)
  (X :pointer)
  (minval :double)
  (maxval :double)
  (props :pointer))

(cffi:defcfun ("af_draw_surface" af_draw_surface) af_err
  (wind :pointer)
  (xVals :pointer)
  (yVals :pointer)
  (S :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_vector_field_nd" af_draw_vector_field_nd) af_err
  (wind :pointer)
  (points :pointer)
  (directions :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_vector_field_3d" af_draw_vector_field_3d) af_err
  (wind :pointer)
  (xPoints :pointer)
  (yPoints :pointer)
  (zPoints :pointer)
  (xDirs :pointer)
  (yDirs :pointer)
  (zDirs :pointer)
  (props :pointer))

(cffi:defcfun ("af_draw_vector_field_2d" af_draw_vector_field_2d) af_err
  (wind :pointer)
  (xPoints :pointer)
  (yPoints :pointer)
  (xDirs :pointer)
  (yDirs :pointer)
  (props :pointer))

(cffi:defcfun ("af_grid" af_grid) af_err
  (wind :pointer)
  (rows :int)
  (cols :int))

(cffi:defcfun ("af_set_axes_limits_compute" af_set_axes_limits_compute) af_err
  (wind :pointer)
  (x :pointer)
  (y :pointer)
  (z :pointer)
  (exact :pointer)
  (props :pointer))

(cffi:defcfun ("af_set_axes_limits_2d" af_set_axes_limits_2d) af_err
  (wind :pointer)
  (xmin :float)
  (xmax :float)
  (ymin :float)
  (ymax :float)
  (exact :pointer)
  (props :pointer))

(cffi:defcfun ("af_set_axes_limits_3d" af_set_axes_limits_3d) af_err
  (wind :pointer)
  (xmin :float)
  (xmax :float)
  (ymin :float)
  (ymax :float)
  (zmin :float)
  (zmax :float)
  (exact :pointer)
  (props :pointer))

(cffi:defcfun ("af_set_axes_titles" af_set_axes_titles) af_err
  (wind :pointer)
  (xtitle :string)
  (ytitle :string)
  (ztitle :string)
  (props :pointer))

(cffi:defcfun ("af_set_axes_label_format" af_set_axes_label_format) af_err
  (wind :pointer)
  (xformat :string)
  (yformat :string)
  (zformat :string)
  (props :pointer))

(cffi:defcfun ("af_show" af_show) af_err
  (wind :pointer))

(cffi:defcfun ("af_is_window_closed" af_is_window_closed) af_err
  (out :pointer)
  (wind :pointer))

(cffi:defcfun ("af_set_visibility" af_set_visibility) af_err
  (wind :pointer)
  (is_visible :pointer))

(cffi:defcfun ("af_destroy_window" af_destroy_window) af_err
  (wind :pointer))

(cffi:defcstruct af_half
	(data_ :unsigned-short)
	(fraction :unsigned-short)
	(exponent :unsigned-short)
	(sign :unsigned-short))

(cffi:defctype af_half af_half)

(cffi:defctype half af_half)

(cffi:defcfun ("af_gradient" af_gradient) af_err
  (dx :pointer)
  (dy :pointer)
  (in :pointer))

(cffi:defcfun ("af_load_image" af_load_image) af_err
  (out :pointer)
  (filename :string)
  (isColor :pointer))

(cffi:defcfun ("af_save_image" af_save_image) af_err
  (filename :string)
  (in :pointer))

(cffi:defcfun ("af_load_image_memory" af_load_image_memory) af_err
  (out :pointer)
  (ptr :pointer))

(cffi:defcfun ("af_save_image_memory" af_save_image_memory) af_err
  (ptr :pointer)
  (in :pointer)
  (format af_image_format))

(cffi:defcfun ("af_delete_image_memory" af_delete_image_memory) af_err
  (ptr :pointer))

(cffi:defcfun ("af_load_image_native" af_load_image_native) af_err
  (out :pointer)
  (filename :string))

(cffi:defcfun ("af_save_image_native" af_save_image_native) af_err
  (filename :string)
  (in :pointer))

(cffi:defcfun ("af_is_image_io_available" af_is_image_io_available) af_err
  (out :pointer))

(cffi:defcfun ("af_resize" af_resize) af_err
  (out :pointer)
  (in :pointer)
  (odim0 :long-long)
  (odim1 :long-long)
  (method af_interp_type))

(cffi:defcfun ("af_transform" af_transform) af_err
  (out :pointer)
  (in :pointer)
  (transform :pointer)
  (odim0 :long-long)
  (odim1 :long-long)
  (method af_interp_type)
  (inverse :pointer))

(cffi:defcfun ("af_transform_v2" af_transform_v2) af_err
  (out :pointer)
  (in :pointer)
  (transform :pointer)
  (odim0 :long-long)
  (odim1 :long-long)
  (method af_interp_type)
  (inverse :pointer))

(cffi:defcfun ("af_transform_coordinates" af_transform_coordinates) af_err
  (out :pointer)
  (tf :pointer)
  (d0 :float)
  (d1 :float))

(cffi:defcfun ("af_rotate" af_rotate) af_err
  (out :pointer)
  (in :pointer)
  (theta :float)
  (crop :pointer)
  (method af_interp_type))

(cffi:defcfun ("af_translate" af_translate) af_err
  (out :pointer)
  (in :pointer)
  (trans0 :float)
  (trans1 :float)
  (odim0 :long-long)
  (odim1 :long-long)
  (method af_interp_type))

(cffi:defcfun ("af_scale" af_scale) af_err
  (out :pointer)
  (in :pointer)
  (scale0 :float)
  (scale1 :float)
  (odim0 :long-long)
  (odim1 :long-long)
  (method af_interp_type))

(cffi:defcfun ("af_skew" af_skew) af_err
  (out :pointer)
  (in :pointer)
  (skew0 :float)
  (skew1 :float)
  (odim0 :long-long)
  (odim1 :long-long)
  (method af_interp_type)
  (inverse :pointer))

(cffi:defcfun ("af_histogram" af_histogram) af_err
  (out :pointer)
  (in :pointer)
  (nbins :unsigned-int)
  (minval :double)
  (maxval :double))

(cffi:defcfun ("af_dilate" af_dilate) af_err
  (out :pointer)
  (in :pointer)
  (mask :pointer))

(cffi:defcfun ("af_dilate3" af_dilate3) af_err
  (out :pointer)
  (in :pointer)
  (mask :pointer))

(cffi:defcfun ("af_erode" af_erode) af_err
  (out :pointer)
  (in :pointer)
  (mask :pointer))

(cffi:defcfun ("af_erode3" af_erode3) af_err
  (out :pointer)
  (in :pointer)
  (mask :pointer))

(cffi:defcfun ("af_bilateral" af_bilateral) af_err
  (out :pointer)
  (in :pointer)
  (spatial_sigma :float)
  (chromatic_sigma :float)
  (isColor :pointer))

(cffi:defcfun ("af_mean_shift" af_mean_shift) af_err
  (out :pointer)
  (in :pointer)
  (spatial_sigma :float)
  (chromatic_sigma :float)
  (iter :unsigned-int)
  (is_color :pointer))

(cffi:defcfun ("af_minfilt" af_minfilt) af_err
  (out :pointer)
  (in :pointer)
  (wind_length :long-long)
  (wind_width :long-long)
  (edge_pad af_border_type))

(cffi:defcfun ("af_maxfilt" af_maxfilt) af_err
  (out :pointer)
  (in :pointer)
  (wind_length :long-long)
  (wind_width :long-long)
  (edge_pad af_border_type))

(cffi:defcfun ("af_regions" af_regions) af_err
  (out :pointer)
  (in :pointer)
  (connectivity af_connectivity)
  (ty af_dtype))

(cffi:defcfun ("af_sobel_operator" af_sobel_operator) af_err
  (dx :pointer)
  (dy :pointer)
  (img :pointer)
  (ker_size :unsigned-int))

(cffi:defcfun ("af_rgb2gray" af_rgb2gray) af_err
  (out :pointer)
  (in :pointer)
  (rPercent :float)
  (gPercent :float)
  (bPercent :float))

(cffi:defcfun ("af_gray2rgb" af_gray2rgb) af_err
  (out :pointer)
  (in :pointer)
  (rFactor :float)
  (gFactor :float)
  (bFactor :float))

(cffi:defcfun ("af_hist_equal" af_hist_equal) af_err
  (out :pointer)
  (in :pointer)
  (hist :pointer))

(cffi:defcfun ("af_gaussian_kernel" af_gaussian_kernel) af_err
  (out :pointer)
  (rows :int)
  (cols :int)
  (sigma_r :double)
  (sigma_c :double))

(cffi:defcfun ("af_hsv2rgb" af_hsv2rgb) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_rgb2hsv" af_rgb2hsv) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_color_space" af_color_space) af_err
  (out :pointer)
  (image :pointer)
  (to af_cspace_t)
  (from af_cspace_t))

(cffi:defcfun ("af_unwrap" af_unwrap) af_err
  (out :pointer)
  (in :pointer)
  (wx :long-long)
  (wy :long-long)
  (sx :long-long)
  (sy :long-long)
  (px :long-long)
  (py :long-long)
  (is_column :pointer))

(cffi:defcfun ("af_wrap" af_wrap) af_err
  (out :pointer)
  (in :pointer)
  (ox :long-long)
  (oy :long-long)
  (wx :long-long)
  (wy :long-long)
  (sx :long-long)
  (sy :long-long)
  (px :long-long)
  (py :long-long)
  (is_column :pointer))

(cffi:defcfun ("af_wrap_v2" af_wrap_v2) af_err
  (out :pointer)
  (in :pointer)
  (ox :long-long)
  (oy :long-long)
  (wx :long-long)
  (wy :long-long)
  (sx :long-long)
  (sy :long-long)
  (px :long-long)
  (py :long-long)
  (is_column :pointer))

(cffi:defcfun ("af_sat" af_sat) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_ycbcr2rgb" af_ycbcr2rgb) af_err
  (out :pointer)
  (in :pointer)
  (standard af_ycc_std))

(cffi:defcfun ("af_rgb2ycbcr" af_rgb2ycbcr) af_err
  (out :pointer)
  (in :pointer)
  (standard af_ycc_std))

(cffi:defcfun ("af_moments" af_moments) af_err
  (out :pointer)
  (in :pointer)
  (moment af_moment_type))

(cffi:defcfun ("af_moments_all" af_moments_all) af_err
  (out :pointer)
  (in :pointer)
  (moment af_moment_type))

(cffi:defcfun ("af_canny" af_canny) af_err
  (out :pointer)
  (in :pointer)
  (threshold_type af_canny_threshold)
  (low_threshold_ratio :float)
  (high_threshold_ratio :float)
  (sobel_window :unsigned-int)
  (is_fast :pointer))

(cffi:defcfun ("af_anisotropic_diffusion" af_anisotropic_diffusion) af_err
  (out :pointer)
  (in :pointer)
  (timestep :float)
  (conductance :float)
  (iterations :unsigned-int)
  (fftype af_flux_function)
  (diffusion_kind af_diffusion_eq))

(cffi:defcfun ("af_iterative_deconv" af_iterative_deconv) af_err
  (out :pointer)
  (in :pointer)
  (ker :pointer)
  (iterations :unsigned-int)
  (relax_factor :float)
  (algo af_iterative_deconv_algo))

(cffi:defcfun ("af_inverse_deconv" af_inverse_deconv) af_err
  (out :pointer)
  (in :pointer)
  (psf :pointer)
  (gamma :float)
  (algo af_inverse_deconv_algo))

(cffi:defcfun ("af_confidence_cc" af_confidence_cc) af_err
  (out :pointer)
  (in :pointer)
  (seedx :pointer)
  (seedy :pointer)
  (radius :unsigned-int)
  (multiplier :unsigned-int)
  (iter :int)
  (segmented_value :double))

(cffi:defcstruct af_index_t
	(idx :pointer)
	(isSeq :pointer)
	(isBatch :pointer))

(cffi:defcunion af_index_t_idx
	(arr :pointer)
	(seq :pointer))

(cffi:defctype af_index_t af_index_t)

(cffi:defcfun ("af_index" af_index) af_err
  (out :pointer)
  (in :pointer)
  (ndims :unsigned-int)
  (index :pointer))

(cffi:defcfun ("af_lookup" af_lookup) af_err
  (out :pointer)
  (in :pointer)
  (indices :pointer)
  (dim :unsigned-int))

(cffi:defcfun ("af_assign_seq" af_assign_seq) af_err
  (out :pointer)
  (lhs :pointer)
  (ndims :unsigned-int)
  (indices :pointer)
  (rhs :pointer))

(cffi:defcfun ("af_index_gen" af_index_gen) af_err
  (out :pointer)
  (in :pointer)
  (ndims :long-long)
  (indices :pointer))

(cffi:defcfun ("af_assign_gen" af_assign_gen) af_err
  (out :pointer)
  (lhs :pointer)
  (ndims :long-long)
  (indices :pointer)
  (rhs :pointer))

(cffi:defcfun ("af_create_indexers" af_create_indexers) af_err
  (indexers :pointer))

(cffi:defcfun ("af_set_array_indexer" af_set_array_indexer) af_err
  (indexer :pointer)
  (idx :pointer)
  (dim :long-long))

(cffi:defcfun ("af_set_seq_indexer" af_set_seq_indexer) af_err
  (indexer :pointer)
  (idx :pointer)
  (dim :long-long)
  (is_batch :pointer))

(cffi:defcfun ("af_set_seq_param_indexer" af_set_seq_param_indexer) af_err
  (indexer :pointer)
  (begin :double)
  (end :double)
  (step :double)
  (dim :long-long)
  (is_batch :pointer))

(cffi:defcfun ("af_release_indexers" af_release_indexers) af_err
  (indexers :pointer))

(cffi:defcfun ("af_svd" af_svd) af_err
  (u :pointer)
  (s :pointer)
  (vt :pointer)
  (in :pointer))

(cffi:defcfun ("af_svd_inplace" af_svd_inplace) af_err
  (u :pointer)
  (s :pointer)
  (vt :pointer)
  (in :pointer))

(cffi:defcfun ("af_lu" af_lu) af_err
  (lower :pointer)
  (upper :pointer)
  (pivot :pointer)
  (in :pointer))

(cffi:defcfun ("af_lu_inplace" af_lu_inplace) af_err
  (pivot :pointer)
  (in :pointer)
  (is_lapack_piv :pointer))

(cffi:defcfun ("af_qr" af_qr) af_err
  (q :pointer)
  (r :pointer)
  (tau :pointer)
  (in :pointer))

(cffi:defcfun ("af_qr_inplace" af_qr_inplace) af_err
  (tau :pointer)
  (in :pointer))

(cffi:defcfun ("af_cholesky" af_cholesky) af_err
  (out :pointer)
  (info :pointer)
  (in :pointer)
  (is_upper :pointer))

(cffi:defcfun ("af_cholesky_inplace" af_cholesky_inplace) af_err
  (info :pointer)
  (in :pointer)
  (is_upper :pointer))

(cffi:defcfun ("af_solve" af_solve) af_err
  (x :pointer)
  (a :pointer)
  (b :pointer)
  (options af_mat_prop))

(cffi:defcfun ("af_solve_lu" af_solve_lu) af_err
  (x :pointer)
  (a :pointer)
  (piv :pointer)
  (b :pointer)
  (options af_mat_prop))

(cffi:defcfun ("af_inverse" af_inverse) af_err
  (out :pointer)
  (in :pointer)
  (options af_mat_prop))

(cffi:defcfun ("af_pinverse" af_pinverse) af_err
  (out :pointer)
  (in :pointer)
  (tol :double)
  (options af_mat_prop))

(cffi:defcfun ("af_rank" af_rank) af_err
  (rank :pointer)
  (in :pointer)
  (tol :double))

(cffi:defcfun ("af_det" af_det) af_err
  (det_real :pointer)
  (det_imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_norm" af_norm) af_err
  (out :pointer)
  (in :pointer)
  (type af_norm_type)
  (p :double)
  (q :double))

(cffi:defcfun ("af_is_lapack_available" af_is_lapack_available) af_err
  (out :pointer))

(cffi:defctype af_memory_manager :pointer)

(cffi:defctype af_memory_manager_initialize_fn :pointer)

(cffi:defctype af_memory_manager_shutdown_fn :pointer)

(cffi:defctype af_memory_manager_alloc_fn :pointer)

(cffi:defctype af_memory_manager_allocated_fn :pointer)

(cffi:defctype af_memory_manager_unlock_fn :pointer)

(cffi:defctype af_memory_manager_signal_memory_cleanup_fn :pointer)

(cffi:defctype af_memory_manager_print_info_fn :pointer)

(cffi:defctype af_memory_manager_user_lock_fn :pointer)

(cffi:defctype af_memory_manager_user_unlock_fn :pointer)

(cffi:defctype af_memory_manager_is_user_locked_fn :pointer)

(cffi:defctype af_memory_manager_get_memory_pressure_fn :pointer)

(cffi:defctype af_memory_manager_jit_tree_exceeds_memory_pressure_fn :pointer)

(cffi:defctype af_memory_manager_add_memory_management_fn :pointer)

(cffi:defctype af_memory_manager_remove_memory_management_fn :pointer)

(cffi:defcfun ("af_create_memory_manager" af_create_memory_manager) af_err
  (out :pointer))

(cffi:defcfun ("af_release_memory_manager" af_release_memory_manager) af_err
  (handle :pointer))

(cffi:defcfun ("af_set_memory_manager" af_set_memory_manager) af_err
  (handle :pointer))

(cffi:defcfun ("af_set_memory_manager_pinned" af_set_memory_manager_pinned) af_err
  (handle :pointer))

(cffi:defcfun ("af_unset_memory_manager" af_unset_memory_manager) af_err)

(cffi:defcfun ("af_unset_memory_manager_pinned" af_unset_memory_manager_pinned) af_err)

(cffi:defcfun ("af_memory_manager_get_payload" af_memory_manager_get_payload) af_err
  (handle :pointer)
  (payload :pointer))

(cffi:defcfun ("af_memory_manager_set_payload" af_memory_manager_set_payload) af_err
  (handle :pointer)
  (payload :pointer))

(cffi:defcfun ("af_memory_manager_set_initialize_fn" af_memory_manager_set_initialize_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_shutdown_fn" af_memory_manager_set_shutdown_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_alloc_fn" af_memory_manager_set_alloc_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_allocated_fn" af_memory_manager_set_allocated_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_unlock_fn" af_memory_manager_set_unlock_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_signal_memory_cleanup_fn" af_memory_manager_set_signal_memory_cleanup_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_print_info_fn" af_memory_manager_set_print_info_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_user_lock_fn" af_memory_manager_set_user_lock_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_user_unlock_fn" af_memory_manager_set_user_unlock_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_is_user_locked_fn" af_memory_manager_set_is_user_locked_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_get_memory_pressure_fn" af_memory_manager_set_get_memory_pressure_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_jit_tree_exceeds_memory_pressure_fn" af_memory_manager_set_jit_tree_exceeds_memory_pressure_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_add_memory_management_fn" af_memory_manager_set_add_memory_management_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_set_remove_memory_management_fn" af_memory_manager_set_remove_memory_management_fn) af_err
  (handle :pointer)
  (fn :pointer))

(cffi:defcfun ("af_memory_manager_get_active_device_id" af_memory_manager_get_active_device_id) af_err
  (handle :pointer)
  (id :pointer))

(cffi:defcfun ("af_memory_manager_native_alloc" af_memory_manager_native_alloc) af_err
  (handle :pointer)
  (ptr :pointer)
  (size :pointer))

(cffi:defcfun ("af_memory_manager_native_free" af_memory_manager_native_free) af_err
  (handle :pointer)
  (ptr :pointer))

(cffi:defcfun ("af_memory_manager_get_max_memory_size" af_memory_manager_get_max_memory_size) af_err
  (handle :pointer)
  (size :pointer)
  (id :int))

(cffi:defcfun ("af_memory_manager_get_memory_pressure_threshold" af_memory_manager_get_memory_pressure_threshold) af_err
  (handle :pointer)
  (value :pointer))

(cffi:defcfun ("af_memory_manager_set_memory_pressure_threshold" af_memory_manager_set_memory_pressure_threshold) af_err
  (handle :pointer)
  (value :float))

(cffi:defcfun ("af_convolve2_gradient_nn" af_convolve2_gradient_nn) af_err
  (out :pointer)
  (incoming_gradient :pointer)
  (original_signal :pointer)
  (original_filter :pointer)
  (convolved_output :pointer)
  (stride_dims :unsigned-int)
  (strides :pointer)
  (padding_dims :unsigned-int)
  (paddings :pointer)
  (dilation_dims :unsigned-int)
  (dilations :pointer)
  (grad_type af_conv_gradient_type))

(cffi:defctype af_random_engine :pointer)

(cffi:defcfun ("af_create_random_engine" af_create_random_engine) af_err
  (engine :pointer)
  (rtype af_random_engine_type)
  (seed :unsigned-long-long))

(cffi:defcfun ("af_retain_random_engine" af_retain_random_engine) af_err
  (out :pointer)
  (engine :pointer))

(cffi:defcfun ("af_random_engine_set_type" af_random_engine_set_type) af_err
  (engine :pointer)
  (rtype af_random_engine_type))

(cffi:defcfun ("af_random_engine_get_type" af_random_engine_get_type) af_err
  (rtype :pointer)
  (engine :pointer))

(cffi:defcfun ("af_random_uniform" af_random_uniform) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype)
  (engine :pointer))

(cffi:defcfun ("af_random_normal" af_random_normal) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype)
  (engine :pointer))

(cffi:defcfun ("af_random_engine_set_seed" af_random_engine_set_seed) af_err
  (engine :pointer)
  (seed :unsigned-long-long))

(cffi:defcfun ("af_get_default_random_engine" af_get_default_random_engine) af_err
  (engine :pointer))

(cffi:defcfun ("af_set_default_random_engine_type" af_set_default_random_engine_type) af_err
  (rtype af_random_engine_type))

(cffi:defcfun ("af_random_engine_get_seed" af_random_engine_get_seed) af_err
  (seed :pointer)
  (engine :pointer))

(cffi:defcfun ("af_release_random_engine" af_release_random_engine) af_err
  (engine :pointer))

(cffi:defcfun ("af_randu" af_randu) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_randn" af_randn) af_err
  (out :pointer)
  (ndims :unsigned-int)
  (dims :pointer)
  (type af_dtype))

(cffi:defcfun ("af_set_seed" af_set_seed) af_err
  (seed :unsigned-long-long))

(cffi:defcfun ("af_get_seed" af_get_seed) af_err
  (seed :pointer))

(cffi:defcstruct af_seq
	(begin :double)
	(end :double)
	(step :double))

(cffi:defctype af_seq af_seq)

(cffi:defcvar ("af_span" af_span)
 af_seq)

(cffi:defcfun ("af_make_seq" af_make_seq) af_seq
  (begin :double)
  (end :double)
  (step :double))

(cffi:defcfun ("af_approx1" af_approx1) af_err
  (out :pointer)
  (in :pointer)
  (pos :pointer)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx1_v2" af_approx1_v2) af_err
  (out :pointer)
  (in :pointer)
  (pos :pointer)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx2" af_approx2) af_err
  (out :pointer)
  (in :pointer)
  (pos0 :pointer)
  (pos1 :pointer)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx2_v2" af_approx2_v2) af_err
  (out :pointer)
  (in :pointer)
  (pos0 :pointer)
  (pos1 :pointer)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx1_uniform" af_approx1_uniform) af_err
  (out :pointer)
  (in :pointer)
  (pos :pointer)
  (interp_dim :int)
  (idx_start :double)
  (idx_step :double)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx1_uniform_v2" af_approx1_uniform_v2) af_err
  (out :pointer)
  (in :pointer)
  (pos :pointer)
  (interp_dim :int)
  (idx_start :double)
  (idx_step :double)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx2_uniform" af_approx2_uniform) af_err
  (out :pointer)
  (in :pointer)
  (pos0 :pointer)
  (interp_dim0 :int)
  (idx_start_dim0 :double)
  (idx_step_dim0 :double)
  (pos1 :pointer)
  (interp_dim1 :int)
  (idx_start_dim1 :double)
  (idx_step_dim1 :double)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_approx2_uniform_v2" af_approx2_uniform_v2) af_err
  (out :pointer)
  (in :pointer)
  (pos0 :pointer)
  (interp_dim0 :int)
  (idx_start_dim0 :double)
  (idx_step_dim0 :double)
  (pos1 :pointer)
  (interp_dim1 :int)
  (idx_start_dim1 :double)
  (idx_step_dim1 :double)
  (method af_interp_type)
  (off_grid :float))

(cffi:defcfun ("af_fft" af_fft) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (odim0 :long-long))

(cffi:defcfun ("af_fft_inplace" af_fft_inplace) af_err
  (in :pointer)
  (norm_factor :double))

(cffi:defcfun ("af_fft2" af_fft2) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (odim0 :long-long)
  (odim1 :long-long))

(cffi:defcfun ("af_fft2_inplace" af_fft2_inplace) af_err
  (in :pointer)
  (norm_factor :double))

(cffi:defcfun ("af_fft3" af_fft3) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (odim0 :long-long)
  (odim1 :long-long)
  (odim2 :long-long))

(cffi:defcfun ("af_fft3_inplace" af_fft3_inplace) af_err
  (in :pointer)
  (norm_factor :double))

(cffi:defcfun ("af_ifft" af_ifft) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (odim0 :long-long))

(cffi:defcfun ("af_ifft_inplace" af_ifft_inplace) af_err
  (in :pointer)
  (norm_factor :double))

(cffi:defcfun ("af_ifft2" af_ifft2) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (odim0 :long-long)
  (odim1 :long-long))

(cffi:defcfun ("af_ifft2_inplace" af_ifft2_inplace) af_err
  (in :pointer)
  (norm_factor :double))

(cffi:defcfun ("af_ifft3" af_ifft3) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (odim0 :long-long)
  (odim1 :long-long)
  (odim2 :long-long))

(cffi:defcfun ("af_ifft3_inplace" af_ifft3_inplace) af_err
  (in :pointer)
  (norm_factor :double))

(cffi:defcfun ("af_fft_r2c" af_fft_r2c) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (pad0 :long-long))

(cffi:defcfun ("af_fft2_r2c" af_fft2_r2c) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (pad0 :long-long)
  (pad1 :long-long))

(cffi:defcfun ("af_fft3_r2c" af_fft3_r2c) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (pad0 :long-long)
  (pad1 :long-long)
  (pad2 :long-long))

(cffi:defcfun ("af_fft_c2r" af_fft_c2r) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (is_odd :pointer))

(cffi:defcfun ("af_fft2_c2r" af_fft2_c2r) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (is_odd :pointer))

(cffi:defcfun ("af_fft3_c2r" af_fft3_c2r) af_err
  (out :pointer)
  (in :pointer)
  (norm_factor :double)
  (is_odd :pointer))

(cffi:defcfun ("af_convolve1" af_convolve1) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (mode af_conv_mode)
  (domain af_conv_domain))

(cffi:defcfun ("af_convolve2" af_convolve2) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (mode af_conv_mode)
  (domain af_conv_domain))

(cffi:defcfun ("af_convolve2_nn" af_convolve2_nn) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (stride_dims :unsigned-int)
  (strides :pointer)
  (padding_dims :unsigned-int)
  (paddings :pointer)
  (dilation_dims :unsigned-int)
  (dilations :pointer))

(cffi:defcfun ("af_convolve3" af_convolve3) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (mode af_conv_mode)
  (domain af_conv_domain))

(cffi:defcfun ("af_convolve2_sep" af_convolve2_sep) af_err
  (out :pointer)
  (col_filter :pointer)
  (row_filter :pointer)
  (signal :pointer)
  (mode af_conv_mode))

(cffi:defcfun ("af_fft_convolve1" af_fft_convolve1) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (mode af_conv_mode))

(cffi:defcfun ("af_fft_convolve2" af_fft_convolve2) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (mode af_conv_mode))

(cffi:defcfun ("af_fft_convolve3" af_fft_convolve3) af_err
  (out :pointer)
  (signal :pointer)
  (filter :pointer)
  (mode af_conv_mode))

(cffi:defcfun ("af_fir" af_fir) af_err
  (y :pointer)
  (b :pointer)
  (x :pointer))

(cffi:defcfun ("af_iir" af_iir) af_err
  (y :pointer)
  (b :pointer)
  (a :pointer)
  (x :pointer))

(cffi:defcfun ("af_medfilt" af_medfilt) af_err
  (out :pointer)
  (in :pointer)
  (wind_length :long-long)
  (wind_width :long-long)
  (edge_pad af_border_type))

(cffi:defcfun ("af_medfilt1" af_medfilt1) af_err
  (out :pointer)
  (in :pointer)
  (wind_width :long-long)
  (edge_pad af_border_type))

(cffi:defcfun ("af_medfilt2" af_medfilt2) af_err
  (out :pointer)
  (in :pointer)
  (wind_length :long-long)
  (wind_width :long-long)
  (edge_pad af_border_type))

(cffi:defcfun ("af_set_fft_plan_cache_size" af_set_fft_plan_cache_size) af_err
  (cache_size :pointer))

(cffi:defcfun ("af_create_sparse_array" af_create_sparse_array) af_err
  (out :pointer)
  (nRows :long-long)
  (nCols :long-long)
  (values :pointer)
  (rowIdx :pointer)
  (colIdx :pointer)
  (stype af_storage))

(cffi:defcfun ("af_create_sparse_array_from_ptr" af_create_sparse_array_from_ptr) af_err
  (out :pointer)
  (nRows :long-long)
  (nCols :long-long)
  (nNZ :long-long)
  (values :pointer)
  (rowIdx :pointer)
  (colIdx :pointer)
  (type af_dtype)
  (stype af_storage)
  (src af_source))

(cffi:defcfun ("af_create_sparse_array_from_dense" af_create_sparse_array_from_dense) af_err
  (out :pointer)
  (dense :pointer)
  (stype af_storage))

(cffi:defcfun ("af_sparse_convert_to" af_sparse_convert_to) af_err
  (out :pointer)
  (in :pointer)
  (destStorage af_storage))

(cffi:defcfun ("af_sparse_to_dense" af_sparse_to_dense) af_err
  (out :pointer)
  (sparse :pointer))

(cffi:defcfun ("af_sparse_get_info" af_sparse_get_info) af_err
  (values :pointer)
  (rowIdx :pointer)
  (colIdx :pointer)
  (stype :pointer)
  (in :pointer))

(cffi:defcfun ("af_sparse_get_values" af_sparse_get_values) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sparse_get_row_idx" af_sparse_get_row_idx) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sparse_get_col_idx" af_sparse_get_col_idx) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sparse_get_nnz" af_sparse_get_nnz) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_sparse_get_storage" af_sparse_get_storage) af_err
  (out :pointer)
  (in :pointer))

(cffi:defcfun ("af_mean" af_mean) af_err
  (out :pointer)
  (in :pointer)
  (dim :long-long))

(cffi:defcfun ("af_mean_weighted" af_mean_weighted) af_err
  (out :pointer)
  (in :pointer)
  (weights :pointer)
  (dim :long-long))

(cffi:defcfun ("af_var" af_var) af_err
  (out :pointer)
  (in :pointer)
  (isbiased :pointer)
  (dim :long-long))

(cffi:defcfun ("af_var_v2" af_var_v2) af_err
  (out :pointer)
  (in :pointer)
  (bias af_var_bias)
  (dim :long-long))

(cffi:defcfun ("af_var_weighted" af_var_weighted) af_err
  (out :pointer)
  (in :pointer)
  (weights :pointer)
  (dim :long-long))

(cffi:defcfun ("af_meanvar" af_meanvar) af_err
  (mean :pointer)
  (var :pointer)
  (in :pointer)
  (weights :pointer)
  (bias af_var_bias)
  (dim :long-long))

(cffi:defcfun ("af_stdev" af_stdev) af_err
  (out :pointer)
  (in :pointer)
  (dim :long-long))

(cffi:defcfun ("af_stdev_v2" af_stdev_v2) af_err
  (out :pointer)
  (in :pointer)
  (bias af_var_bias)
  (dim :long-long))

(cffi:defcfun ("af_cov" af_cov) af_err
  (out :pointer)
  (X :pointer)
  (Y :pointer)
  (isbiased :pointer))

(cffi:defcfun ("af_cov_v2" af_cov_v2) af_err
  (out :pointer)
  (X :pointer)
  (Y :pointer)
  (bias af_var_bias))

(cffi:defcfun ("af_median" af_median) af_err
  (out :pointer)
  (in :pointer)
  (dim :long-long))

(cffi:defcfun ("af_mean_all" af_mean_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_mean_all_weighted" af_mean_all_weighted) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer)
  (weights :pointer))

(cffi:defcfun ("af_var_all" af_var_all) af_err
  (realVal :pointer)
  (imagVal :pointer)
  (in :pointer)
  (isbiased :pointer))

(cffi:defcfun ("af_var_all_v2" af_var_all_v2) af_err
  (realVal :pointer)
  (imagVal :pointer)
  (in :pointer)
  (bias af_var_bias))

(cffi:defcfun ("af_var_all_weighted" af_var_all_weighted) af_err
  (realVal :pointer)
  (imagVal :pointer)
  (in :pointer)
  (weights :pointer))

(cffi:defcfun ("af_stdev_all" af_stdev_all) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer))

(cffi:defcfun ("af_stdev_all_v2" af_stdev_all_v2) af_err
  (real :pointer)
  (imag :pointer)
  (in :pointer)
  (bias af_var_bias))

(cffi:defcfun ("af_median_all" af_median_all) af_err
  (realVal :pointer)
  (imagVal :pointer)
  (in :pointer))

(cffi:defcfun ("af_corrcoef" af_corrcoef) af_err
  (realVal :pointer)
  (imagVal :pointer)
  (X :pointer)
  (Y :pointer))

(cffi:defcfun ("af_topk" af_topk) af_err
  (values :pointer)
  (indices :pointer)
  (in :pointer)
  (k :int)
  (dim :int)
  (order af_topk_function))

(cffi:defcfun ("af_print_array" af_print_array) af_err
  (arr :pointer))

(cffi:defcfun ("af_print_array_gen" af_print_array_gen) af_err
  (exp :string)
  (arr :pointer)
  (precision :int))

(cffi:defcfun ("af_save_array" af_save_array) af_err
  (index :pointer)
  (key :string)
  (arr :pointer)
  (filename :string)
  (append :pointer))

(cffi:defcfun ("af_read_array_index" af_read_array_index) af_err
  (out :pointer)
  (filename :string)
  (index :unsigned-int))

(cffi:defcfun ("af_read_array_key" af_read_array_key) af_err
  (out :pointer)
  (filename :string)
  (key :string))

(cffi:defcfun ("af_read_array_key_check" af_read_array_key_check) af_err
  (index :pointer)
  (filename :string)
  (key :string))

(cffi:defcfun ("af_array_to_string" af_array_to_string) af_err
  (output :pointer)
  (exp :string)
  (arr :pointer)
  (precision :int)
  (transpose :pointer))

(cffi:defcfun ("af_example_function" af_example_function) af_err
  (out :pointer)
  (in :pointer)
  (param af_someenum_t))

(cffi:defcfun ("af_get_version" af_get_version) af_err
  (major :pointer)
  (minor :pointer)
  (patch :pointer))

(cffi:defcfun ("af_get_revision" af_get_revision) :string)

(cffi:defcfun ("af_get_size_of" af_get_size_of) af_err
  (size :pointer)
  (type af_dtype))

(cffi:defcfun ("af_set_enable_stacktrace" af_set_enable_stacktrace) af_err
  (is_enabled :int))

(cffi:defcfun ("af_fast" af_fast) af_err
  (out :pointer)
  (in :pointer)
  (thr :float)
  (arc_length :unsigned-int)
  (non_max :pointer)
  (feature_ratio :float)
  (edge :unsigned-int))

(cffi:defcfun ("af_harris" af_harris) af_err
  (out :pointer)
  (in :pointer)
  (max_corners :unsigned-int)
  (min_response :float)
  (sigma :float)
  (block_size :unsigned-int)
  (k_thr :float))

(cffi:defcfun ("af_orb" af_orb) af_err
  (feat :pointer)
  (desc :pointer)
  (in :pointer)
  (fast_thr :float)
  (max_feat :unsigned-int)
  (scl_fctr :float)
  (levels :unsigned-int)
  (blur_img :pointer))

(cffi:defcfun ("af_sift" af_sift) af_err
  (feat :pointer)
  (desc :pointer)
  (in :pointer)
  (n_layers :unsigned-int)
  (contrast_thr :float)
  (edge_thr :float)
  (init_sigma :float)
  (double_input :pointer)
  (intensity_scale :float)
  (feature_ratio :float))

(cffi:defcfun ("af_gloh" af_gloh) af_err
  (feat :pointer)
  (desc :pointer)
  (in :pointer)
  (n_layers :unsigned-int)
  (contrast_thr :float)
  (edge_thr :float)
  (init_sigma :float)
  (double_input :pointer)
  (intensity_scale :float)
  (feature_ratio :float))

(cffi:defcfun ("af_hamming_matcher" af_hamming_matcher) af_err
  (idx :pointer)
  (dist :pointer)
  (query :pointer)
  (train :pointer)
  (dist_dim :long-long)
  (n_dist :unsigned-int))

(cffi:defcfun ("af_nearest_neighbour" af_nearest_neighbour) af_err
  (idx :pointer)
  (dist :pointer)
  (query :pointer)
  (train :pointer)
  (dist_dim :long-long)
  (n_dist :unsigned-int)
  (dist_type af_match_type))

(cffi:defcfun ("af_match_template" af_match_template) af_err
  (out :pointer)
  (search_img :pointer)
  (template_img :pointer)
  (m_type af_match_type))

(cffi:defcfun ("af_susan" af_susan) af_err
  (out :pointer)
  (in :pointer)
  (radius :unsigned-int)
  (diff_thr :float)
  (geom_thr :float)
  (feature_ratio :float)
  (edge :unsigned-int))

(cffi:defcfun ("af_dog" af_dog) af_err
  (out :pointer)
  (in :pointer)
  (radius1 :int)
  (radius2 :int))

(cffi:defcfun ("af_homography" af_homography) af_err
  (H :pointer)
  (inliers :pointer)
  (x_src :pointer)
  (y_src :pointer)
  (x_dst :pointer)
  (y_dst :pointer)
  (htype af_homography_type)
  (inlier_thr :float)
  (iterations :unsigned-int)
  (otype af_dtype))


